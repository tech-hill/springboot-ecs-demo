name: Deploy to ECS Fargate

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    name: Build and Deploy Spring Boot to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make mvnw executable
        run: chmod +x mvnw

      - name: Build Spring Boot app
        run: ./mvnw clean package -DskipTests

      - name: Debug Docker credentials
        run: |
         echo "DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME != '' && 'SET' || 'MISSING' }}"
         echo "DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD != '' && 'SET' || 'MISSING' }}"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
         username: ${{ secrets.DOCKER_USERNAME }}
         password: ${{ secrets.DOCKER_PASSWORD }}



      - name: Build and push Docker image
        run: |
          docker build -t techhill/my-spring-app:latest .
          docker push techhill/my-spring-app:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # <-- Make sure this matches your resources


      - name: Register new ECS task definition
        run: |
          cat <<EOF > task-def.json
          {
            "family": "${{ secrets.ECS_TASK_DEFINITION_FAMILY }}",
            "networkMode": "awsvpc",
            "executionRoleArn": "arn:aws:iam::011528261085:role/ecsTaskExecutionRole",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "containerDefinitions": [
              {
                "name": "my-spring-app",
                "image": "techhill/my-spring-app:latest",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 8080,
                    "protocol": "tcp"
                  }
                ]
              }
            ]
          }
          EOF
          aws ecs register-task-definition --cli-input-json file://task-def.json

      - name: Get latest task definition revision
        run: |
          REVISION=$(aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION_FAMILY }} --query 'taskDefinition.revision' --output text)
          echo "REV=$REVISION" >> $GITHUB_ENV

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition ${{ secrets.ECS_TASK_DEFINITION_FAMILY }}:${{ env.REV }}
